// -------- index tranasition ----------- //


function navigateTo(url) {
    fetch(url)
        .then(response => response.text())
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            
            // Update the page title from the new <head>
            const newTitle = doc.querySelector('title')?.textContent || 'Alix C. Architecture';
            document.title = newTitle;

            // Compute Set of new stylesheet hrefs
            const docHrefs = new Set([...doc.querySelectorAll('link[rel="stylesheet"]')].map(link => link.href));

            // Add new CSS stylesheets
            doc.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
                if (!document.querySelector(`link[href="${link.href}"]`)) {
                    document.head.appendChild(link.cloneNode());
                }
            });

            // Extract the new #main-content from the <body>
            const newContent = doc.querySelector('#main-content').innerHTML;

            // Create a new div for the content with initial opacity 0
            const newDiv = document.createElement('div');
            newDiv.className = 'page-content';
            newDiv.innerHTML = newContent;
            newDiv.style.opacity = '0';

            const container = document.getElementById('content-container');
            container.appendChild(newDiv);

            const currentContent = document.getElementById('current-content');

            // Animate the transition
            requestAnimationFrame(() => {
                currentContent.style.opacity = '0';
                newDiv.style.opacity = '1';
            });

            // Clean up after the transition ends
            newDiv.addEventListener('transitionend', () => {
                container.removeChild(currentContent);
                newDiv.id = 'current-content';

                // Remove old styles
                document.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
                    if (!docHrefs.has(link.href)) {
                        link.remove();
                    }
                });

            }, { once: true });

            // Update the browser history
            history.pushState({}, '', url);
        })
        .catch(error => console.error('Navigation failed:', error));
}


// -------------- Lightmode & Darkmode --------------- //


const toggleDarkButtons = document.querySelectorAll('.darkModeToggle');

toggleDarkButtons.forEach(button => {
    button.addEventListener('click', () => {
        if (document.body.classList.contains('darkmode')) {
            document.body.classList.remove('darkmode');
            document.body.classList.add('lightmode');
            localStorage.setItem('theme', 'light');
        } else if (document.body.classList.contains('lightmode')) {
            document.body.classList.remove('lightmode');
            document.body.classList.add('darkmode');
            localStorage.setItem('theme', 'dark');
        } else {
            document.body.classList.add('darkmode'); // Default to darkmode
            localStorage.setItem('theme', 'dark');
        }
    });
});

const toggleLightButtons = document.querySelectorAll('.lightModeToggle');

toggleLightButtons.forEach(button => {
    button.addEventListener('click', () => {
        if (document.body.classList.contains('darkmode')) {
            document.body.classList.remove('darkmode');
            document.body.classList.add('lightmode');
            localStorage.setItem('theme', 'light');
        } else if (document.body.classList.contains('lightmode')) {
            document.body.classList.remove('lightmode');
            document.body.classList.add('darkmode');
            localStorage.setItem('theme', 'dark');
        } else {
            document.body.classList.add('lightmode'); // Default to lightmode
            localStorage.setItem('theme', 'light');
        }
    });
});

const savedTheme = localStorage.getItem('theme');
document.body.classList.remove('darkmode', 'lightmode');

if (savedTheme === 'dark') {
    document.body.classList.add('darkmode');
} else if (savedTheme === 'light') {
    document.body.classList.add('lightmode');
}


// -------- STICKY NAVBAR ----------- //


const mainNav = document.querySelector('.mainNav');
const hamIcon = document.querySelector('.hamIcon');
const hamburger = document.querySelector('.hamburger');
const threshold = window.innerHeight / 6;
console.log(threshold);

if (mainNav || hamIcon){
    function handleScrolldown(){
        if (window.scrollY > threshold) {
            [mainNav, hamIcon, hamburger].forEach(el => el.classList.add('hidden'));
        } 
        else {
            [mainNav, hamIcon, hamburger].forEach(el => el.classList.remove('hidden'));
        }
    }

    window.addEventListener('scroll', handleScrolldown);
    handleScrolldown();
}

// -------- rotating asterisks ----------- //


const asterisks = document.querySelectorAll('.asterisk');

asterisks.forEach(asterisk => {
    window.addEventListener('scroll', function() {
        const scrollY = window.scrollY;
        const angle = scrollY / 3; // 1 degree per 3 pixels scrolled
        asterisk.style.transform = `rotate(${angle}deg)`;
    });
});